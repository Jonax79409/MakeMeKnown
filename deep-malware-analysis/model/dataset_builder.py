"""
    Build dataset via PETransformer.
"""

import json
import sys
import glob
import os
from .transformer import PETransformer

class DatasetBuilder(object):
    """
        Accept directory input,
        directory_format:
            malware/ 
                trojan/
                backdoor/
                rootkit/
            benign/
            
        extract features from PE files in the directory,
        serialize extracted features,
        save as json to be used later
    """

    MALWARE_TYPES = ['trojan', 'backdoor', 'rootkit']
    MALWARE_DIR = 'malwares'
    BENIGN_DIR = 'benign'

    BUILD_DIR = 'build'

    def __init__(self, data_dir, *args, **kwargs):
        self._build_dataset(data_dir)

    @staticmethod
    def _create_dir(path):
        os.makedirs(path)

    @staticmethod
    def _path(*args, **kwargs):
        return os.path.join(*args, **kwargs)

    @staticmethod
    def _exists(*args, **kwargs):
        return os.path.exists(*args, **kwargs)

    def _build_dataset(self, data_dir):
        BUILD_PATH = self._path(data_dir, self.BUILD_DIR)
        
        if not self._exists(BUILD_PATH):
            self._create_dir(BUILD_PATH)

        print('[+] Building Malwares')
        # Iterate over the different malware types
        for mal_type in self.MALWARE_TYPES:
            print(f'[+] Building {mal_type} malwares')
            
            MALWARE_PATH = self._path(data_dir, self.MALWARE_DIR, mal_type)
            BUILD_MALWARE_PATH = self._path(BUILD_PATH, self.MALWARE_DIR, mal_type)            
            
            if not self._exists(BUILD_MALWARE_PATH):
                self._create_dir(BUILD_MALWARE_PATH)
            
            # Add all serialized malwares to a single file <data_dir>/build/malware/<malware_type>/<mal_type>_data.dat
            build_file_name = self._path(BUILD_MALWARE_PATH, f'{mal_type}_data.jsonl')

            if self._exists(build_file_name):
                os.remove(build_file_name)

            # Add all malwares
            for dirpath, dnames, fnames in os.walk(MALWARE_PATH):
                for file_name in fnames:
                    print(f'[+] Building {file_name}')
                    try:
                        transformed = PETransformer(self._path(MALWARE_PATH, file_name))
                    except:
                        continue
                    data_dict = transformed.feature_dict

                    with open(build_file_name, 'a') as build_file:
                        build_file.write(json.dumps(data_dict))
                        build_file.write('\n')    

        # Iterate over benign files
        print('[+] Building benign data')
        BUILD_BENIGN_PATH = self._path(BUILD_PATH, self.BENIGN_DIR)
        BENIGN_PATH = self._path(data_dir, self.BENIGN_DIR)

        if not self._exists(BUILD_BENIGN_PATH):
            self._create_dir(BUILD_BENIGN_PATH)

        build_file_name = self._path(BUILD_BENIGN_PATH, f'{self.BENIGN_DIR}_data.jsonl')

        for file_name in glob.glob(self._path(BENIGN_PATH, './*.*')):
            print(f'[+] Building {file_name}')
            transformed = PETransformer(file_name)

            data_dict = transformed.feature_dict

            with open(build_file_name, 'a') as build_file:
                    build_file.write(json.dumps(data_dict))
                    build_file.write('\n')

class DatasetReader(object):
    """
        Read built files.
    """

    MALWARE_TYPES = ['trojan', 'backdoor', 'rootkit']
    MALWARE_DIR = 'malwares'
    BENIGN_DIR = 'benign'

    BUILD_DIR = 'build'

    def __init__(self, data_dir, *args, **kwargs):
        self.read_data = None
        self._read_dataset(data_dir)
    
    @staticmethod
    def _path(*args, **kwargs):
        return os.path.join(*args, **kwargs)

    @staticmethod
    def _exists(*args, **kwargs):
        return os.path.exists(*args, **kwargs)

    def _read_dataset(self, data_dir):
        READ_DATA = {m: [] for m in self.MALWARE_TYPES}

        BUILD_PATH = self._path(data_dir, self.BUILD_DIR)
        
        # Iterate over the different malware types
        for mal_type in self.MALWARE_TYPES:
            
            READ_DATA[mal_type] = []
            
            BUILD_MALWARE_PATH = self._path(BUILD_PATH, self.MALWARE_DIR, mal_type)            

            # Read from data file <data_dir>/build/malware/<malware_type>/<mal_type>_data.dat
            build_file_name = self._path(BUILD_MALWARE_PATH, f'{mal_type}_data.jsonl')
            
            if not self._exists(build_file_name):
                continue
            
            with open(build_file_name, 'r') as build_file:
                lines = [line.strip() for line in build_file.readlines()]

            for mal_data in lines:
                READ_DATA[mal_type].append(PETransformer(raw_features=mal_data).vector)
            
        # Iterate over benign files
        BUILD_BENIGN_PATH = self._path(BUILD_PATH, self.BENIGN_DIR)

        build_file_name = self._path(BUILD_BENIGN_PATH, f'{self.BENIGN_DIR}_data.jsonl')

        READ_DATA[self.BENIGN_DIR] = []

        if not self._exists(build_file_name):
            self.read_data = READ_DATA
            return READ_DATA

        with open(build_file_name, 'r') as build_file:
            lines = [line.strip() for line in build_file.readlines()]

        for mal_data in lines:
            READ_DATA[self.BENIGN_DIR].append(PETransformer(raw_features=mal_data).vector)
        
        self.read_data = READ_DATA

        return READ_DATA

if __name__ == '__main__':
    try:
        dir_path = sys.argv[1]
    except:
        dir_path = 'dataset'

    builder =  DatasetBuilder(dir_path)
    

    