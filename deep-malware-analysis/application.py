"""
	MDSA API
"""

import sys
import time
from io import BytesIO
import lightgbm as lgb 
from model.transformer import PETransformer
import numpy as np

from flask import Flask, request, make_response, jsonify, Response#, send_from_directory
from flask_restful import Resource, Api, reqparse, abort
from flask_cors import CORS
from werkzeug.datastructures import FileStorage

DEFAULT_MODEL_PATH = "model/model.mdl"
LABEL_MAP = ['benign', 'trojan', 'rootkit', 'backdoor']

PREDICTOR = lgb.Booster(model_file=DEFAULT_MODEL_PATH)

def get_pred(buffered_file):
    transformed = PETransformer(buffered_file).vector
    
    preds = PREDICTOR.predict(transformed.reshape(1, 2479))

    preds_map = np.argmax(preds)

    print(preds_map)
    return preds_map

"""
    Flask Config
"""

app = Flask(__name__)
app.config.from_object(__name__)
cors = CORS(app, resources={r"/api/*": {"origins": "*"}})

api = Api(app)

class MalVerify(Resource):
    pe_parser = reqparse.RequestParser()
    pe_parser.add_argument('file', type=FileStorage, location='files')

    def post(self):
        print(request.values)
        pe_args = self.pe_parser.parse_args()
        # req_args = self.req_parser.parse_args()
        pe = pe_args['file']

        pe_file = BytesIO()
        try:
            pe.save(pe_file)
        except:
            abort(400, message="Invalid Input")

        start = time.time()
        preds = get_pred(pe_file)

        app.logger.info('/api/verify: {} s taken to generate response'.format(time.time() - start))
        
        data_dict = {
            'class': LABEL_MAP[preds],
            'preds': int(preds)
        }

        return make_response(jsonify(data_dict))

api.add_resource(MalVerify, '/api/verify')

# @app.route('/api/verify', methods=['POST'])
# def verify():
#     print(request.files)
#     return 'something'

if __name__ == '__main__':
    app.run(debug=True)
